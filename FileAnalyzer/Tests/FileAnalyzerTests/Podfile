ENV['COCOAPODS_DISABLE_STATS'] = "true"

# Uncomment the next line to define a global platform for your project
platform :ios, '10.0'

plugin 'cocoapods-repo-update'

use_frameworks!

install! 'cocoapods',
:disable_input_output_paths => true,
:generate_multiple_pod_projects => true,
:preserve_pod_file_structure => true,
:share_schemes_for_development_pods => true

workspace 'DodoPizza'
project 'DodoPizza', 'App-Store' => :release, 'Ad-Hoc' => :release, 'Debug' => :debug

def analytics_providers_pods
  pod 'AppsFlyerFramework'
  pod 'Firebase', '8.1.0'
  pod 'FirebaseDynamicLinks', '8.1.0'
  pod 'Firebase/Analytics', '8.1.0'
  pod 'Firebase/RemoteConfig', '8.1.0'
  pod 'Firebase/Crashlytics', '8.1.0'
  pod 'FirebaseInstallations', '8.1.0'
  pod 'Firebase/Performance', '8.1.0'
end

def real_pod(module_name)
  pod module_name, :path => "./#{module_name}"
end

def pod_tests(module_name)
  pod "#{module_name}TestHelpers", :path => "./#{module_name}", :testspecs => ['Tests']
end

def spm_pod(module_name)
  pod module_name, :path => "./#{module_name}/#{module_name}"
end

abstract_target 'DodoCommon' do
  pod "DCommon", :path => "./DCommon"
  pod "DNetwork", :path => "./DNetwork"

  pod 'NInject',   :tag => '1.6.0', :git => 'git@github.com:NikSativa/NInject.git'
  pod 'NQueue',    :tag => '1.1.0', :git => 'git@github.com:NikSativa/NQueue.git'
  pod 'NCallback', :tag => '2.1.0', :git => 'git@github.com:NikSativa/NCallback.git'
  pod 'NRequest',  :tag => '2.11.5', :git => 'git@github.com:NikSativa/NRequest.git'

  target 'DodoPizza' do
    inherit! :complete

    # internal pods
    real_pod("Address")
    real_pod("AreYouInPizzeria")
    real_pod("Auth")
    real_pod("DAnalytics")
    real_pod("Cart")
    real_pod("Checkout")
    real_pod("DataPersistence")
    real_pod("DFoundation")
    real_pod("Domain")
    real_pod("DMapKit")
    real_pod("DUIKit")
    real_pod("Kusto")
    real_pod("Locality")
    real_pod("Menu")
    real_pod("Mindbox")
    real_pod("MobileBackend")
    real_pod("Phone")
    real_pod("Product")
    real_pod("ServicePush")
    real_pod("DPushNotifications")
    real_pod("State")
    real_pod("Pizzeria")
    real_pod("Bonuses")
    real_pod("OrderTracking")
    real_pod("Rate")
    real_pod("OrderHistory")
    real_pod("OrderHistoryDomain")
    real_pod("Payment")
    real_pod("Chat")
    real_pod("Geolocation")
    real_pod("AppSetup")
    real_pod("Loyalty")
    real_pod("Autocomplete")
    real_pod("DID")
    real_pod("CityLanding")
    real_pod("MenuSearch")
    real_pod("DeliveryLocation")
    real_pod("DeliveryLocationUI")
    real_pod("DSecurity")
    real_pod("Stories")
    spm_pod("DynamicType")

    pod 'HCaptcha',   :path => './hCaptcha'
    pod 'Crypto',   :path => './Acquirers'
    pod 'Acquirers',   :path => './Acquirers'

    # Infra
    pod 'Bagel', :configurations => ['Debug', 'Ad-Hoc']
    pod 'SwiftLint', '~> 0.41.0'
    pod 'BlackBox', :source => 'git@github.com:dodopizza/dodo_pods.git'
    pod 'KeychainSwift'
    analytics_providers_pods

    # Integrations
    pod 'Threads', '3.8.4'
    pod 'InAppStory', :tag => '1.7.4', :git => 'https://github.com/inappstory/ios-sdk.git'
    pod 'libPhoneNumber-iOS', :git => 'https://github.com/iziz/libPhoneNumber-iOS'
    pod 'FirebaseMessaging', '8.1.0'

    # UI
    pod 'Nuke'
    pod 'MBProgressHUD'
    pod 'DeviceKit'

    # Candidates to remove
    pod 'RTIconButton'
    pod 'PREBorderView'
    pod 'LKAlertController'
    pod 'SZTextView'
    pod 'PinLayout'
    pod 'KVOController'

    target 'DodoPizzaTests' do
      inherit! :search_paths

      pod_tests("Address")
      pod_tests("AreYouInPizzeria")
      pod_tests("Auth")
      pod_tests("DAnalytics")
      pod_tests("Checkout")
      pod_tests("DataPersistence")
      pod_tests("DFoundation")
      pod_tests("Domain")
      pod_tests("DUIKit")
      pod_tests("Kusto")
      pod_tests("Menu")
      pod_tests("Mindbox")
      pod_tests("MobileBackend")
      pod_tests("Phone")
      pod_tests("Product")
      pod_tests("ServicePush")
      pod_tests("DPushNotifications")
      pod_tests("State")
      pod_tests("Pizzeria")
      pod_tests("Cart")
      pod_tests("Bonuses")
      pod_tests("Locality")
      pod_tests("OrderTracking")
      pod_tests("DMapKit")
      pod_tests("Rate")
      pod_tests("OrderHistory")
      pod_tests("OrderHistoryDomain")
      pod_tests("Payment")
      pod_tests("Chat")
      pod_tests("Geolocation")
      pod_tests("AppSetup")
      pod_tests("Loyalty")
      pod_tests("Autocomplete")
      pod_tests("DCommon")
      pod_tests("DNetwork")
      pod_tests("DID")
      pod_tests("CityLanding")
      pod_tests("MenuSearch")
      pod_tests("DeliveryLocation")
      pod_tests("DeliveryLocationUI")
      pod_tests("DSecurity")
      pod_tests("Stories")

      pod 'CryptoTestHelpers',   :path => './Acquirers', :testspecs => ['Tests']
      pod 'AcquirersTestHelpers',   :path => './Acquirers', :testspecs => ['Tests']

      # next generation
      pod 'NInjectTestHelpers',   :tag => '1.6.0', :git => 'git@github.com:NikSativa/NInject.git', :testspecs => ['Tests']
      pod 'NQueueTestHelpers',    :tag => '1.1.0', :git => 'git@github.com:NikSativa/NQueue.git', :testspecs => ['Tests']
      pod 'NCallbackTestHelpers', :tag => '2.1.0', :git => 'git@github.com:NikSativa/NCallback.git', :testspecs => ['Tests']
      pod 'NRequestTestHelpers',  :tag => '2.11.5', :git => 'git@github.com:NikSativa/NRequest.git', :testspecs => ['Tests']

      # common test pods
      pod 'Quick', '~> 4.0.0', :inhibit_warnings => true
      pod 'Nimble', '~> 9.2.0', :inhibit_warnings => true
      pod 'NSpry', :git => 'git@github.com:NikSativa/NSpry.git', :tag => '1.0.1', :inhibit_warnings => true

      pod 'SnapshotTesting', :inhibit_warnings => true
      pod 'AssertEqualProperties', :git => 'git@github.com:akaDuality/AssertEqualProperties.git', :inhibit_warnings => true
    end

    target 'MindBoxNotification' do
      real_pod("Mindbox")
      real_pod("DAnalytics")
    end

    target 'PushNotificationContentExtension' do
      real_pod("DUIKit")
      real_pod("Rate")
    end
  end

  target 'E2ETests' do
    inherit! :complete
    pod 'Qase', '~> 0.1.1'
    real_pod("DE2E")
  end
end

pre_install do |installer|
  system("cp -f ./DataPersistence/Source/UserDefaults/LocalSetting.swift ./E2ETests/Utils/LocalSetting.swift")
  system("cp -f ./Domain/Source/Features/FeatureFlag.swift ./E2ETests/Utils/FeatureFlag.swift")
  system("cp -f ./AppSetup/Source/ViewIdentifiers.swift ./E2ETests/Utils/ViewIdentifiers.swift")
  system("cp -f ./AppSetup/Source/LaunchArguments.swift ./E2ETests/Utils/LaunchArguments.swift")
end

post_install do |installer|
  installer.generated_projects.each do |project|
    project.targets.each do |target|
      if project.path.to_s.include? "Payment."\
        or project.path.to_s.include? "Cart."\
        or project.path.to_s.include? "Auth."\
        or project.path.to_s.include? "Address."\
        or project.path.to_s.include? "Checkout."\
        or project.path.to_s.include? "Domain."\
        or project.path.to_s.include? "DUIKit."\
        or project.path.to_s.include? "Menu."\
        or project.path.to_s.include? "Phone."\
        or project.path.to_s.include? "Pizzeria."\
        or project.path.to_s.include? "Bonuses."\
        or project.path.to_s.include? "Locality."\
        or project.path.to_s.include? "OrderTracking."\
        or project.path.to_s.include? "Product."\
        or project.path.to_s.include? "Rate."\
        or project.path.to_s.include? "OrderHistory."\
        or project.path.to_s.include? "OrderHistoryDomain."\
        or project.path.to_s.include? "Chat."\
        or project.path.to_s.include? "AppSetup."\
        or project.path.to_s.include? "State."\
        or project.path.to_s.include? "Loyalty."\
        or project.path.to_s.include? "CityLanding."\
        or project.path.to_s.include? "MenuSearch."\
        or project.path.to_s.include? "DeliveryLocation."\
        or project.path.to_s.include? "DeliveryLocationUI."\
        or project.path.to_s.include? "Stories."\
        or project.path.to_s.include? "AreYouInPizzeria."\

        missingBundlePhase = target.new_shell_script_build_phase("Find missing bundle")
        missingBundlePhase.shell_script = "PATTERN=\"NSLocalizedString\\\(\\\".*\\\",\\\\s*comment?:.*\\\\\)\"\necho \"searching for missing bundle, path = ${SRCROOT}/../#{target.name}\"\n\nfind \"${SRCROOT}/../#{target.name}\" \\\( -name \"*.swift\" \\\) -print0 \\\n| xargs -0 egrep --with-filename --line-number --only-matching $PATTERN \\\n| perl -p -e \"s/\($PATTERN\)/ error: \\$1/\""

        swiftLintPhase = target.new_shell_script_build_phase("SwiftLint")
        swiftLintPhase.shell_script = "sh $SRCROOT/../scripts/swiftlint.sh $TARGET_NAME"

        linzaEnPhase = target.new_shell_script_build_phase("Validate that localized keys exist in en.strings ðŸ”Ž")
        linzaEnPhase.shell_script = "$SRCROOT/../scripts/Linza --path $SRCROOT/../#{target.name}/Source --lang en --log"

        linzaRuPhase = target.new_shell_script_build_phase("Validate that localized keys exist in ru.strings ðŸ”Ž")
        linzaRuPhase.shell_script = "$SRCROOT/../scripts/Linza --path $SRCROOT/../#{target.name}/Source --lang ru --log"

        project.root_object.known_regions = ['ru', 'de', 'en-GB', 'en', 'et', 'lt', 'pl', 'ro', 'sl', 'uk', 'vi', 'cs', 'fi', 'en-NG']

        project.build_configurations.each do |config|
          config.build_settings['CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED'] = 'YES'
        end
      end

      #      EN Localization
      if project.path.to_s.include? "Address."\
        or project.path.to_s.include? "Auth."\
        or project.path.to_s.include? "Cart."\
        or project.path.to_s.include? "Checkout."\
        or project.path.to_s.include? "Pizzeria."\
        or project.path.to_s.include? "Domain."\
        or project.path.to_s.include? "DUIKit."\
        or project.path.to_s.include? "Menu."\
        or project.path.to_s.include? "Phone."\
        or project.path.to_s.include? "Bonuses."\
        or project.path.to_s.include? "Locality."\
        or project.path.to_s.include? "OrderTracking."\
        or project.path.to_s.include? "Product."\
        or project.path.to_s.include? "Rate."\
        or project.path.to_s.include? "OrderHistory."\
        or project.path.to_s.include? "OrderHistoryDomain."\
        or project.path.to_s.include? "Payment."\
        or project.path.to_s.include? "Chat."\
        or project.path.to_s.include? "AppSetup."\
        or project.path.to_s.include? "State."\
        or project.path.to_s.include? "Loyalty."\
        or project.path.to_s.include? "CityLanding."\
        or project.path.to_s.include? "MenuSearch."\
        or project.path.to_s.include? "DeliveryLocation."\
        or project.path.to_s.include? "DeliveryLocationUI."\
        or project.path.to_s.include? "AreYouInPizzeria."

        project.root_object.development_region = 'en'

        project.save()
      end

      target.build_configurations.each do |config|
        config.build_settings['COCOAPODS_PARALLEL_CODE_SIGN'] = 'true'
        config.build_settings['SWIFT_VERSION'] = '5.4'
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '10.0'
        config.build_settings['ENABLE_BITCODE'] = 'YES'

        # IMPORTANT needs check again the logic of frameworks
        if !['Quick', 'Nimble', 'Spry', 'Spry+Nimble'].include? target.name.to_s
          config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'NO'
        end

        if config.to_s == 'Debug'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = '$(inherited) DEBUG=1 SHOULD_USE_DEBUG=1'
          config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = '$(inherited) DEBUG SHOULD_USE_DEBUG'
          config.build_settings['ENABLE_BITCODE'] = 'NO'
          elsif config.to_s == 'Ad-Hoc'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = '$(inherited) SHOULD_USE_DEBUG=1'
          config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = '$(inherited) SHOULD_USE_DEBUG'
          else
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = '$(inherited)'
          config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = '$(inherited)'
        end
      end
    end
  end
end
